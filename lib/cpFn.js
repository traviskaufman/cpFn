var $__0 = require('harmony-reflect'), Proxy = $__0.Proxy, has = $__0.has, getOwnPropertyNames = $__0.getOwnPropertyNames, set = $__0.set;
var defineProperty = Object.defineProperty;
var SPECIAL = ['name', 'length', 'toString'];
function checkOverride(name, props) {
  var idx = props.indexOf(name);
  if (~idx && SPECIAL.indexOf(name) < 0) {
    props.splice(idx, 1);
  }
}
module.exports = function(fn) {
  var props = getOwnPropertyNames(fn);
  var vals = props.reduce(function(m, p) {
    if (['caller', 'callee', 'arguments'].indexOf(p) < 0) {
      m[p] = fn[p];
    }
    return m;
  }, {});
  return new Proxy(fn, {
    get: function(target, name, rcvr) {
      if (name === 'toString') return fn.toString;
      return ~props.indexOf(name) ? vals[name]: this[name];
    },
    set: function(target, name, val) {
      checkOverride(name, props);
      this[name] = val;
      return true;
    },
    defineProperty: function(target, name, desc) {
      checkOverride(name, props);
      defineProperty(this, name, desc);
      return true;
    }
  });
};

//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3RyYXZpc2thdWZtYW4vZGV2L2NwRm4vc3JjL2NwRm4uanMuZXM2Iiwic291cmNlcyI6WyIvVXNlcnMvdHJhdmlza2F1Zm1hbi9kZXYvY3BGbi9zcmMvY3BGbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiVUFLSSxRQUFPLENBQUMsaUJBQUEsQ0FBQTtvQkFFYSxPQUFBLENBQUEsY0FBQTtBQUNyQixHQUFBLFFBQUEsRUFBVSxFQUFDLE1BQUEsQ0FBUSxTQUFBLENBQVUsV0FBQSxDQUFBO0FBRWpDLFFBQVMsY0FBQSxDQUFjLElBQUEsQ0FBTSxNQUFBLENBQU87QUFDOUIsS0FBQSxJQUFBLEVBQU0sTUFBQSxDQUFBLE9BQWEsQ0FBQyxJQUFBLENBQUE7QUFDeEIsSUFBQSxFQUFJLENBQUMsR0FBQSxHQUFPLFFBQUEsQ0FBQSxPQUFlLENBQUMsSUFBQSxDQUFBLEVBQVEsRUFBQSxDQUFHO0FBQ3JDLFNBQUEsQ0FBQSxNQUFZLENBQUMsR0FBQSxDQUFLLEVBQUEsQ0FBQTtBQUFBO0FBQUE7QUFJdEIsTUFBQSxDQUFBLE9BQUEsRUFBaUIsU0FBQSxDQUFTLEVBQUEsQ0FBSTtBQUN4QixLQUFBLE1BQUEsRUFBUSxvQkFBbUIsQ0FBQyxFQUFBLENBQUE7QUFDNUIsS0FBQSxLQUFBLEVBQU8sTUFBQSxDQUFBLE1BQVksQ0FBQyxRQUFBLENBQVMsQ0FBQSxDQUFHLEVBQUEsQ0FBRztBQUNyQyxNQUFBLEVBQUksQ0FBQyxRQUFBLENBQVUsU0FBQSxDQUFVLFlBQUEsQ0FBQSxDQUFBLE9BQW9CLENBQUMsQ0FBQSxDQUFBLEVBQUssRUFBQSxDQUFHO0FBQ3BELE9BQUEsQ0FBRSxDQUFBLENBQUEsRUFBSyxHQUFBLENBQUcsQ0FBQSxDQUFBO0FBQUE7QUFHWixVQUFPLEVBQUE7QUFBQSxHQUFBLENBQ04sRUFBQSxDQUFBLENBQUE7QUFDSCxRQUFPLElBQUksTUFBSyxDQUFDLEVBQUEsQ0FBSTtBQUNuQixPQUFBLENBQUssU0FBQSxDQUFTLE1BQUEsQ0FBUSxLQUFBLENBQU0sS0FBQSxDQUFNO0FBQ2hDLFFBQUEsRUFBSSxJQUFBLElBQVMsV0FBQSxDQUFZLE9BQU8sR0FBQSxDQUFBLFFBQUE7QUFDaEMsWUFBTyxFQUFDLEtBQUEsQ0FBQSxPQUFhLENBQUMsSUFBQSxDQUFBLEVBQVEsS0FBQSxDQUFLLElBQUEsQ0FBQSxDQUFRLEtBQUEsQ0FBSyxJQUFBLENBQUE7QUFBQSxLQUFBO0FBRWxELE9BQUEsQ0FBSyxTQUFBLENBQVMsTUFBQSxDQUFRLEtBQUEsQ0FBTSxJQUFBLENBQUs7QUFDL0IsbUJBQWEsQ0FBQyxJQUFBLENBQU0sTUFBQSxDQUFBO0FBQ3BCLFVBQUEsQ0FBSyxJQUFBLENBQUEsRUFBUSxJQUFBO0FBQ2IsWUFBTyxLQUFBO0FBQUEsS0FBQTtBQUVULGtCQUFBLENBQWdCLFNBQUEsQ0FBUyxNQUFBLENBQVEsS0FBQSxDQUFNLEtBQUEsQ0FBTTtBQUMzQyxtQkFBYSxDQUFDLElBQUEsQ0FBTSxNQUFBLENBQUE7QUFDcEIsb0JBQWMsQ0FBQyxJQUFBLENBQU0sS0FBQSxDQUFNLEtBQUEsQ0FBQTtBQUMzQixZQUFPLEtBQUE7QUFBQTtBQUFBLEdBQUEsQ0FBQTtBQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDYW4ndCB1c2Ugc3RyaWN0IGhlcmUsIGl0IGNhdXNlcyBwcm9ibGVtcyB3aXRoIGZhdCBhcnJvdyBmdW5jdGlvbnMgOihcbi8qIGpzaGludCBzdHJpY3Q6ZmFsc2UgKi9cblxudmFyIHtcbiAgUHJveHksIGhhcywgZ2V0T3duUHJvcGVydHlOYW1lcywgc2V0XG59ID0gcmVxdWlyZSgnaGFybW9ueS1yZWZsZWN0Jyk7XG5cbnZhciB7IGRlZmluZVByb3BlcnR5IH0gPSBPYmplY3Q7XG52YXIgU1BFQ0lBTCA9IFsnbmFtZScsICdsZW5ndGgnLCAndG9TdHJpbmcnXTtcblxuZnVuY3Rpb24gY2hlY2tPdmVycmlkZShuYW1lLCBwcm9wcykge1xuICB2YXIgaWR4ID0gcHJvcHMuaW5kZXhPZihuYW1lKTtcbiAgaWYgKH5pZHggJiYgU1BFQ0lBTC5pbmRleE9mKG5hbWUpIDwgMCkge1xuICAgIHByb3BzLnNwbGljZShpZHgsIDEpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgdmFyIHByb3BzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhmbik7XG4gIHZhciB2YWxzID0gcHJvcHMucmVkdWNlKGZ1bmN0aW9uKG0sIHApIHtcbiAgICBpZiAoWydjYWxsZXInLCAnY2FsbGVlJywgJ2FyZ3VtZW50cyddLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICBtW3BdID0gZm5bcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG4gIH0sIHt9KTtcbiAgcmV0dXJuIG5ldyBQcm94eShmbiwge1xuICAgIGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByY3ZyKSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ3RvU3RyaW5nJykgcmV0dXJuIGZuLnRvU3RyaW5nO1xuICAgICAgcmV0dXJuIH5wcm9wcy5pbmRleE9mKG5hbWUpID8gdmFsc1tuYW1lXSA6IHRoaXNbbmFtZV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgdmFsKSB7XG4gICAgICBjaGVja092ZXJyaWRlKG5hbWUsIHByb3BzKTtcbiAgICAgIHRoaXNbbmFtZV0gPSB2YWw7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIGRlc2MpIHtcbiAgICAgIGNoZWNrT3ZlcnJpZGUobmFtZSwgcHJvcHMpO1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwgZGVzYyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufTtcbiJdfQ==